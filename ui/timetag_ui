#!/usr/bin/python
# vim: set fileencoding=utf-8 et :

# timetag-tools - Tools for UMass FPGA timetagger
# 
# Copyright Â© 2010 Ben Gamari
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/ .
# 
# Author: Ben Gamari <bgamari@physics.umass.edu>
# 


import os, sys
import logging
from collections import defaultdict
import time
from datetime import datetime
import pkgutil

import subprocess
from glob import glob
import json

import gobject, gtk
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg
from matplotlib.backends.backend_gtkcairo import FigureCanvasGTKCairo

from timetag.capture_pipeline import CapturePipeline
from timetag.bin_series_plot import BinSeriesPlot
from timetag.hist_plot import HistPlot
from timetag.fret_hist_plot import FretHistPlot
from timetag.binner import BufferBinner
from timetag.managed_binner import ManagedBinner
from timetag import config

class NumericalIndicators(ManagedBinner):
        def __init__(self, main_win):
                self.update_rate = 5 # Hz
                self.pipeline = main_win.pipeline
                self.rate_mode = True

                self.inputs = {}
                table = gtk.Table(len(main_win.strobe_config)+1, 3)

                label = gtk.Label()
                label.set_markup('<span foreground="darkred" size="large">Loss Events</span>')
                table.attach(label, 0,1, 0,1)
                self.lost = gtk.Label()
                table.attach(self.lost, 1,2, 0,1)

                for c,config in enumerate(main_win.strobe_config):
                        if not config.enabled: continue
                        label, photons = gtk.Label(), gtk.Label()
                        label.set_markup('<span foreground="%s" size="large">%s</span>' % (config.color, config.label))
                        table.attach(label, 0,1, c+1,c+2)
                        table.attach(photons, 1,2, c+1,c+2)
                        self.inputs[c] = photons

                self.widget = table

		ManagedBinner.__init__(self, self.pipeline, 'indicators')

	def create_binner(self):
                return BufferBinner(1. / self.update_rate, self.pipeline.clockrate)

	def on_started(self):
                """ Start indicators update loop """
                gobject.timeout_add(int(1000.0/self.update_rate), self.update)

        def update(self):
		if not self.is_running(): return False
                if self.rate_mode:
                        self._update_rate_indicators()
                else:
                        self._update_total_indicators()
		return True

        def _update_rate_indicators(self):
		binner = self.get_binner()
                for n,channel in enumerate(binner.channels):
                        if n not in self.inputs: continue
                        counts = channel.counts.get()
                        if len(counts) == 0: continue
                        photon_rate = counts[-1]['counts'] * self.update_rate
                        markup = "<span color='darkgreen' size='xx-large'>%d</span> <span size='large'>photons/s</span>" % photon_rate
                        self.inputs[n].set_markup(markup)

                markup = "<span color='darkred' size='xx-large'>%d</span> <span size='large'>losses</span>" % binner.loss_count
                self.lost.set_markup(markup)

        def _update_total_indicators(self):
		binner = self.get_binner()
                for n,channel in enumerate(binner.channels):
                        if n not in self.inputs: continue
                        markup = "<span color='darkgreen' size='xx-large'>%1.3e</span> <span size='large'>photons</span>" % channel.photon_count
                        self.inputs[n].set_markup(markup)

                markup = "<span color='darkred' size='xx-large'>%d</span> <span size='large'>losses</span>" % binner.loss_count
                self.lost.set_markup(markup)

def run_channel_editor(parent, strobe_config, delta_config):
        win = gtk.Dialog('Channel Editor', parent,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        (gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
                         gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
        vbox = gtk.VBox()
        win.get_content_area().pack_start(vbox)

        # Strobe channels
        strobes = []
        table = gtk.Table(rows=4, columns=4)
        for cfg,i in zip(strobe_config, range(4)):
                a = gtk.Label()
                a.set_markup('<i>Strobe %d</i>' % i)
                table.attach(a, 0, 1, i, i+1)

                e = gtk.CheckButton('Enabled')
                e.set_active(cfg.enabled)
                table.attach(e, 1, 2, i, i+1)

                c = gtk.ColorButton(gtk.gdk.color_parse(cfg.color))
                table.attach(c, 2, 3, i, i+1)

                l = gtk.Entry()
                l.set_text(cfg.label)
                table.attach(l, 3, 4, i, i+1)

                strobes.append((e,c,l))

        frame = gtk.Frame('Strobe')
        frame.add(table)
        vbox.pack_end(frame)

        # Delta channels
        deltas = []
        table = gtk.Table(rows=4, columns=4)
        for cfg,i in zip(delta_config, range(4)):
                a = gtk.Label()
                a.set_markup('<i>Delta %d</i>' % (i+1))
                table.attach(a, 0, 1, i, i+1)

                e = gtk.CheckButton('Enabled')
                e.set_active(cfg.enabled)
                table.attach(e, 1, 2, i, i+1)

                l = gtk.Entry()
                l.set_text(cfg.label)
                table.attach(l, 3, 4, i, i+1)

                deltas.append((e,l))

        frame = gtk.Frame('Strobe')
        frame.add(table)
        vbox.pack_end(frame)
        win.show_all()
        if win.run() == gtk.RESPONSE_REJECT:
                win.hide()
                return None

        win.hide()
        return ([ config.StrobeChannel(e.get_active(), c.get_color().to_string(), l.get_text()) for e,c,l in strobes ],
                [ config.DeltaChannel(e.get_active(), l.get_text()) for e,l in deltas ])
        
class MainWindow(object):
        def __init__(self, n_inputs=4):
                self.pipeline = CapturePipeline()
                self.readout_running = False
                self._out_file = None
                self._out_file_cat = None

                self.builder = gtk.Builder()
                src = pkgutil.get_data('timetag', 'main.glade')
                self.builder.add_from_string(src)
                self.builder.connect_signals(self)
                get_obj = self.builder.get_object

                self.win = get_obj('main_window')
                self.win.connect('destroy', self.quit)

                self.set_default_output_file()
                self.indicators = None
                self.plot_processes = []
                self.load_rc()

                self.acquire_hook_processes = []

                self.win.show_all()

        def quit(self, *args):
                for p in self.plot_processes:
                        p.terminate()

                if self.pipeline:
                        self.stop_readout()
                gtk.main_quit()

        def load_rc(self):
                get_obj = self.builder.get_object
                rc = config.load_rc()
                self.strobe_config = rc['strobe-channels']
                self.delta_config = rc['delta-channels']

        def save_rc(self):
                rc = {
                        'strobe-channels': self.strobe_config,
                        'delta-channels': self.delta_config,
                }
                config.update_rc(rc)

        def edit_channels_activate_cb(self, action):
                res = run_channel_editor(self.win, self.strobe_config, self.delta_config)
                if not res: return
                self.strobe_config, self.delta_config = res
                self.save_rc()

        @property
        def strobe_config(self):
                return self._strobe_config

        @strobe_config.setter
        def strobe_config(self, config):
                self._strobe_config = config
                stats = self.builder.get_object('channel_stats')
                if self.indicators:
                        stats.remove(self.indicators.widget)
                self.indicators = NumericalIndicators(self)
                stats.pack_start(self.indicators.widget)
                self.indicators.widget.show_all()

        def usb_latency_changed_cb(self, combobox):
                iter = combobox.get_active_iter()
                latency = combobox.get_model().get_value(iter, 0)
                self.pipeline.set_send_window(latency)

        def set_default_output_file(self):
                file_n = 0
                def get_name(file_n):
                        now = datetime.today()
                        return "%04u-%02u-%02u-run_%03u.timetag" % \
                                (now.year, now.month, now.day, file_n)

                while os.path.exists(get_name(file_n)):
                        file_n += 1
                self.builder.get_object('output_file').props.text = get_name(file_n)

        def output_file_icon_press_cb(self, entry, icon_pos, event):
                self.select_output_file()

        def select_output_file(self):
                filter = gtk.FileFilter()
                filter.set_name('Timetag data file')
                filter.add_pattern('*.timetag')

                fc = gtk.FileChooserDialog('Select output file', self.win,
                                gtk.FILE_CHOOSER_ACTION_SAVE,
                                (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                 gtk.STOCK_OK, gtk.RESPONSE_OK))
                fc.add_filter(filter)
                fc.props.do_overwrite_confirmation = True
                res = fc.run()
                fc.hide()
                if res == gtk.RESPONSE_OK:
                        self.builder.get_object('output_file').props.text = \
                            fc.get_filename()

        def new_out_file(self, filename):
                if self._out_file_cat is not None:
                        self._out_file_cat.terminate()

                dirname = os.path.dirname(filename)
                if not os.path.exists(dirname) and len(dirname) > 0:
                        os.makedirs(dirname)
                self._out_file = open(filename, 'w')
                self._out_file_cat = subprocess.Popen(['timetag-cat'], stdout=self._out_file)

        def get_metadata(self):
                get_obj = self.builder.get_object
                description = get_obj('description').get_buffer().props.text
                channels = {}
                for i in range(4):
                        if self.strobe_config[i].enabled:
                                channels['strobe%d' % i] = self.strobe_config[i].label
                        if self.delta_config[i].enabled:
                                channels['delta%d' % i] = self.delta_config[i].label

                metadata = {
                        'start': datetime.now().isoformat(),
                        'clockrate': self.pipeline.clockrate,
                        'instrument': 'FPGA time tagger',
                        'hardware version': self.pipeline.hw_version,
                        'description': description,
                        'channels': channels,
                }

                hook_env = self.get_hook_env()
                hooks = glob('/etc/timetag/metadata-hooks.d/*') + \
                    glob(os.path.expanduser('~/.timetag/metadata-hooks.d/*'))
                for f in hooks:
                        if not os.access(f, os.X_OK): continue
                        logging.info('Running metadata hook %s' % f)
                        try:
                                p = subprocess.check_output([f], env=hook_env)
                                p = json.loads(p)
                                if not isinstance(p, dict):
                                        raise RuntimeError("Metadata hook returned invalid JSON object")
                                metadata.update(p)
                        except Exception as e:
                                logging.warn('Metadata hook %s failed: %s' % (f, e))
                return metadata

        def get_hook_env(self):
                env = {
                        'TIMETAG_OUTPUT': '' if self._out_file is None else self._out_file.name
                }
                return env

        def start_readout(self):
                get_obj = self.builder.get_object
                output_enabled = get_obj('file_output_enabled').props.active
                if not output_enabled:
                        self._out_file = None
                else:
                        outfile = get_obj('output_file').props.text
                        outfile = os.path.expanduser(outfile)
                        if os.path.exists(outfile):
                                dialog = gtk.MessageDialog(
                                                parent=self.win,
                                                flags=gtk.DIALOG_MODAL,
                                                type=gtk.MESSAGE_QUESTION,
                                                buttons=gtk.BUTTONS_YES_NO,
                                                message_format='The file "%s" already exists. Replace?' % outfile)
                                resp = dialog.run()
                                dialog.hide()
                                del dialog
                                if resp != gtk.RESPONSE_YES:
                                        get_obj('readout_running').props.active = False
                                        get_obj('readout_running').props.label = "Stopped"
                                        return

                        self.new_out_file(outfile)
                        metadata = self.get_metadata()
                        meta_file = outfile + ".meta"
                        json.dump(metadata, open(meta_file, 'w'), indent=2)

                self.pipeline.start_capture()
                self.readout_running = True

                get_obj('readout_running').props.active = True
                get_obj('readout_running').props.label = "Running"
                get_obj('file_output_enabled').props.sensitive = False
                get_obj('output_file').props.sensitive = False
                get_obj('acq_time_enabled').props.sensitive = False
                get_obj('acq_time_spin').props.sensitive = False
                get_obj('description').props.sensitive = False

                progressbar = get_obj('progressbar')
                self.acq_time = 0
                acq_timer_enabled = get_obj('acq_time_enabled').props.active
                acq_stop_time = get_obj('acq_time').props.value
                def timer_cb():
                        if not self.readout_running:
                                return False
                        self.acq_time += 1
                        progressbar.props.text = 'Acquired %d:%02d' % \
                                        (self.acq_time/60, self.acq_time%60)
                        if acq_timer_enabled:
                                progressbar.set_fraction(self.acq_time / acq_stop_time)
                        else:
                                progressbar.pulse()
                        if acq_timer_enabled and self.acq_time >= acq_stop_time:
                                self.stop_readout()
                                return False
                        return True

                gobject.timeout_add_seconds(1, timer_cb)

                hook_env = self.get_hook_env()
                hooks = glob('/etc/timetag/acquire-hooks.d/*') + \
                    glob(os.path.expanduser('~/.timetag/acquire-hooks.d/*'))
                for f in hooks:
                        if not os.access(f, os.X_OK): continue
                        logging.info('Running acquisition hook %s' % f)
                        try:
                                p = subprocess.Popen([f], env=hook_env)
                                self.acquire_hook_processes.append(p)
                        except Exception as e:
                                logging.warn('Acquisition hook %s failed: %s' % (f, e))

        def stop_readout(self):
                # Kill running acquisition hook processes
                for p in self.acquire_hook_processes:
                        try:
                                ret = p.poll()
                                if ret is None:
                                        p.terminate()
                                elif ret != 0:
                                        logging.warn('Acquisition hook failed with exit code %d' % ret)
                        except Exception as e:
                                logging.warn('Failed to kill acquisition hook: %s' % e)
                self.acquire_hook_processes = []

                get_obj = self.builder.get_object
                get_obj('readout_running').props.active = False
                get_obj('readout_running').props.label = "Stopped"
                self.pipeline.stop_capture()
                self.readout_running = False

                # Disable output file
                get_obj('file_output_enabled').props.active = False
                if self._out_file_cat is not None:
                    self._out_file_cat.terminate()
                    self._out_file.close()
                    self._out_file_cat = None
                    self._out_file = None

                # So people don't overwrite the data they just took
                get_obj('file_output_enabled').props.sensitive = True
                get_obj('output_file').props.sensitive = True
                get_obj('acq_time_enabled').props.sensitive = True
                get_obj('acq_time_spin').props.sensitive = True
                get_obj('description').props.sensitive = True
                get_obj('progressbar').props.text = 'Not running'

        def readout_running_toggled_cb(self, action):
                if action.props.active:
                        self.start_readout()
                else:
                        self.stop_readout()

        def indicator_mode_changed_cb(self, widget):
                active = self.builder.get_object('show_rates').props.active
                self.indicators.rate_mode = bool(active)

        def show_hist_activate_cb(self, action):
                self.plot_processes.append(subprocess.Popen(['timetag_photon_hist']))
                #HistPlot(self.pipeline)

        def show_bin_series_activate_cb(self, action):
                self.plot_processes.append(subprocess.Popen(['timetag_bin_series']))
                #BinSeriesPlot(self.pipeline)

        def show_correlation_activate_cb(self,action):
                self.plot_processes.append(subprocess.Popen(['timetag_correlate']))
                
        def show_fret_hist_activate_cb(self, action):
                self.plot_processes.append(subprocess.Popen(['timetag_fret_hist']))
                #FretHistPlot(self.pipeline)

if __name__ == '__main__':
        from optparse import OptionParser

        parser = OptionParser()
        parser.add_option('-d', '--debug', action='store_true',
                          help='Enable debugging output')
        opts, args = parser.parse_args()
        if opts.debug:
                logging.basicConfig(level=logging.DEBUG)

        gtk.gdk.threads_init()
        win = MainWindow()
        gtk.main()

